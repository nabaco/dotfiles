# vim: foldmethod=marker ft=bash
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# Ansi color code variables{{{1
red='\[\e[0;91m\]'
blue='\[\e[0;94m\]'
green='\[\e[0;92m\]'
yellow='\[\e[0;33m\]'
purple=' \[\e[0;35m\]'
white='\[\e[0;97m\]'
expand_bg='\[\e[K\]'
blue_bg='\[\e[0;104m\]${expand_bg}'
red_bg='\[\e[0;101m\]${expand_bg}'
green_bg='\[\e[0;102m\]${expand_bg}'
bold='\[\e[1m\]'
uline='\[\e[4m\]'
reset='\[\e[0m\]'
#}}}

# Functions {{{1
TICK="✓"
CROSS="✗"

URGENT="❗"
OVERDUE="☠️"
DUETODAY="😱"
DUETOMORROW="📅"

function task_indicator {
    ti="["
    if ! which todoist &> /dev/null; then echo ""; return 0; fi
    unset overdue
    unset today
    unset tomorrow
    unset inbox
    unset next
    overdue=`todoist list --filter 'overdue' | wc --lines 2> /dev/null`
    today=`todoist list --filter 'today & ! overdue' | wc --lines 2> /dev/null`
    tomorrow=`todoist list --filter 'tomorrow' | wc --lines 2> /dev/null`
    inbox=`todoist list --filter '#inbox' | wc --lines 2> /dev/null`
    next=`todoist list --filter '@next' | wc --lines 2> /dev/null`
    # if [ "$overdue" -gt "0" ]; then
        ti+="${red@P}O:$overdue${reset@P} "
    # fi
    # if [ "$urgent" -gt "0" ]; then
         ti+="${purple@P}N:$next${reset@P} "
    # fi
    # if [ "$today" -gt "0" ]; then
        ti+="${yellow@P}D:$today${reset@P} "
    # fi
    # if [ "$tomorrow" -gt "0" ]; then
        ti+="${green@P}T:$tomorrow${reset@P} "
    # fi
    # if [ "$inbox" -gt "0" ]; then
        ti+="${blue@P}I:$inbox${reset@P}]"
    # fi
    echo $ti|tr -s " " "|"
}

function ns {
    namespace=`ip netns id`
    ns=${namespace:-"\u@\h"}
    echo ${ns@P}
}

# -- Improved X11 forwarding through GNU Screen (or tmux).
# If not in screen or tmux, update the DISPLAY cache.
# If we are, update the value of DISPLAY to be that in the cache.
update-x11-forwarding ()
{
    if [ -z "$STY" -a -z "$TMUX" ]; then
        echo $DISPLAY > ~/.display.txt
    else
        export DISPLAY=`cat ~/.display.txt`
    fi
}

# This is run before every command.
preexec() {
    # Don't cause a preexec for PROMPT_COMMAND.
    # Beware!  This fails if PROMPT_COMMAND is a string containing more than one command.
    [ "$BASH_COMMAND" = "$PROMPT_COMMAND" ] && return

    update-x11-forwarding

    # Debugging.
    #echo DISPLAY = $DISPLAY, display.txt = `cat ~/.display.txt`, STY = $STY, TMUX = $TMUX
}
trap 'preexec' DEBUG
#}}}
# History Configuration {{{1
# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth
#HISTCONTROL=ignoredups:erasedups

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=10000
HISTFILESIZE=10000

PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND$'\n'}history -a; history -c; history -r"
# }}}

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
[[ $DISPLAY ]] && shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

PS1="[\u@\h \W]\$ "

# Prompt Configuration {{{1
# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    *-termite|xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='$(task_indicator)${reset@P}${debian_chroot:+($debian_chroot)}${green@P}$(ns)${reset@P}:${blue@P}\w${reset@P}${yellow@P}$(__git_ps1 "(%s)")${reset@P}\n\$ '
    if [ -n "$NVIM" ]; then
        :
    elif [ -z "$TMUX" ]; then
        # OSC 1337 for CWD tracking by the terminal
        export PS1=${PS1}'\[\e]1337;CurrentDir=${PWD}\a\]'
    else
        if [ $(echo "$(echo $TERM_PROGRAM_VERSION | sed 's/\([0-9]\.[0-9]\)[a-z]/\1/') < 3.3" | bc) -eq 0 ]; then
            # OSC 7 support was introduced in tmux 3.3a
            # tmux.conf requires requires:
            #   set -as terminal-overrides '*:Swd=\E]1337;CurrentDir='
            #   set -as terminal-features '*:osc7'
            #   set -g set-titles on
            export PS1=${PS1}'\[\e]7;${PWD}\a\]'
        else
            # Otherwise pass OSC 1337 with tmux passthrough
            export PS1=${PS1}'\[\ePtmux;\e\e]1337;CurrentDir=${PWD}\a\e\\\]'
        fi
    fi
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

#}}}


# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

#### End of standard Ubuntu .bashrc ####

#It doesn't work properly with FZF
#set -o vi

# Enter a directory by typing its name
shopt -s autocd

# Integrations {{{1



# Apparish: https://github.com/goedel-gang/bash-utils
# FZF: Expected to source either the first one, or the 2 others, but not all.
FILES_TO_SOURCE="$HOME/.bashrc.$USER \
                 $HOME/local/usr/share/bash-completion/completions/task \
                 $HOME/.config/broot/launcher/bash/br \
                 $HOME/.cargo/env \
                 $HOME/.local/bin/appary.sh \
                 /usr/share/git/completion/git-completion.bash \
                 $HOME/.local/bin/git-completion.bash \
                 /usr/share/git/completion/git-prompt.sh \
                 /usr/share/git-core/contrib/completion/git-prompt.sh \
                 $HOME/.fzf.bash \
                 $HOME/.local/bin/fzf/shell/completion.bash \
                 $HOME/.local/bin/fzf/shell/key-bindings.bash \
                 /usr/share/fzf/completion.bash \
                 /usr/share/fzf/key-bindings.bash \
                 $HOME/.bash_aliases \
                 $HOME/.local/usr/bin/todoist_functions_fzf_bash.sh \
                 $HOME/.cargo/env \
                 $HOME/.local/etc/lfcd.sh"

for file in $FILES_TO_SOURCE; do
    if [ -f "$file" ]; then
        source "$file"
    fi
done

if [ -f ~/.local/usr/bin/bb ]; then
    eval "$(~/.local/usr/bin/bb init -)"
fi
#}}}

tere() {
    local result=$(command tere "$@")
    [ -n "$result" ] && cd -- "$result"
}

